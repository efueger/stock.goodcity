# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2


aliases:
defaults: &defaults
    docker:
      - image: circleci/node:boron
    working_directory: ~/stock.goodcity
restore-repo-cache: &restore-repo-cache
    key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
restore-yarn-cache: &restore-yarn-cache
    key: v1-yarn-packages-{{ checksum "yarn.lock" }}
save-yarn-cache: &save-yarn-cache
    key: v1-yarn-packages-{{ checksum "yarn.lock" }}
    paths:
      - ~/.cache/yarn
      - node_modules
yarn: &yarn
    |
      yarn install --non-interactive --cache-folder ~/.cache/yarn

restore-bower-cache: &restore-bower-cache
    key: v1-bower-components-{{ checksum "bower.json" }}
save-bower-cache: &save-bower-cache
    key: v1-bower-components-{{ checksum "bower.json" }}
    paths:
      - bower_components

restore-bundle-cache: &restore-bundle-cache
    key: v1-bundle-{{ checksum "Gemfile.lock" }}
save-bundle-cache: &save-bundle-cache
    key: v1-bundle-{{ checksum "Gemfile.lock" }}
    paths:
        - vendor/bundle

jobs:
  set_env_vars:
    <<: *defaults

    # environment:
    #   BASH_ENV: ~/.bashrc

    steps:
      - run:
          command: |
            echo 'export PATH="$PATH:$HOME/$CIRCLE_PROJECT_REPONAME/node_modules/.bin:$HOME/.yarn/bin:$ANDROID_HOME/tools"' >> $BASH_ENV

    environment:
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1024m -XX:+HeapDumpOnOutOfMemoryError"'
      XCODE_SCHEME: stock.goodcity
      XCODE_WORKSPACE: stock.goodcity
      GYM_CODE_SIGNING_IDENTITY: "iPhone Distribution: Crossroads Foundation Limited"
      FL_TESTFAIRY_AUTO_UPDATE: "on"
      PILOT_SKIP_SUBMISSION: true
      PILOT_WAIT_PROCESSING_INTERVAL: 60
      ANDROID_HOME: "${HOME}/android-sdk"
      PATH: "${PATH}:${HOME}/${CIRCLE_PROJECT_REPONAME}/node_modules/.bin:$HOME/.yarn/bin:${ANDROID_HOME}/tools"

  checkout_code:
    <<: *defaults

    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/stock.goodcity

  package_dependencies:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-bower-cache
      - run: yarn run bower install
      - save-cache: *save-bower-cache

  test_cases:
    <<: *defaults

    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Start Ember test server
          command: yarn run ember server --port 4203
          background: true
      - run:
          name: Wait for Ember test server to start
          command: dockerize -wait tcp://localhost:4203 -timeout 1m
      - run:
          name: Run Ember tests
          command: COVERAGE=true yarn run ember test
      - persist_to_workspace:
          root: .
          paths:
            - coverage*/lcov.info

  upload-coverage:
    <<: *defaults
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run:
          name: Upload coverage results to Code Climate
          command: |
            yarn run codeclimate-test-reporter < coverage*/lcov.info

  www_build:
    <<: *defaults
    environment:
      EMBER_CLI_CORDOVA: "0"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Set Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export staging=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo false; else echo true; fi)' >> $BASH_ENV
      - run:
          name: Print Environment variables
          command: |
            echo APP_SHA=$APP_SHA
            echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
            echo staginng=$staging
      - run: yarn run ember build --environment=production
      - run: mv dist/ dist-www
      - persist_to_workspace:
          root: .
          paths:
            - dist-www/

  www-deploy:
    <<: *defaults

    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-bundle-cache
      - run: bundle check --path=vendor/bundle || bundle install --deployment --jobs=4 --retry=3
      - save-cache: *save-bundle-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run: mv dist-www/ dist
      - run:
          name: Setup Environment
          command: echo 'export STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
      - run:
          name: Print Environment Variables
          command: echo STAGE=$STAGE
      - run: bundle exec cap $STAGE deploy:upload

  ember_cordova_build:
    <<: *defaults
    environment:
        EMBER_CLI_CORDOVA: "1"
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - restore-cache: *restore-bower-cache
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_SHA=$(echo $CIRCLE_SHA1 | cut -c1-7)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run:
          name: Print Environment variables
          command: |
              echo EMBER_CLI_CORDOVA=$EMBER_CLI_CORDOVA
              echo APP_SHA=$APP_SHA
              echo staging=$staging
              echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
      - run: yarn run ember build --environment=production
      - run: mv dist/ cordova/www
      - persist_to_workspace:
          root: .
          paths:
            - cordova/www

  android_build:
    <<: *defaults

    docker:
      - image: circleci/android:api-28-node8-alpha
    steps:
      - restore-cache: *restore-repo-cache
      - restore-cache: *restore-yarn-cache
      - attach_workspace:
          at: ~/stock.goodcity
      - run:
          name: Setup Environment variables
          command: |
            echo 'export APP_NAME=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo Stock GoodCity; else echo S. Stock GoodCity; fi)' >> $BASH_ENV
            echo 'export APP_ID=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo hk.goodcity.admin; else echo hk.goodcity.adminstaging; fi)' >> $BASH_ENV
            echo 'export APP_VERSION=$(jq -r ".version" package.json)' >> $BASH_ENV
            echo 'export ENVIRONMENT=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:`yarn bin`' >> $BASH_ENV
            echo 'export BUILD=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo --release; else echo --debug; fi)' >> $BASH_ENV
            echo 'export PATH=$PATH:$ANDROID_HOME/tools/gradle/bin' >> $BASH_ENV
      - run:
          name: Print Environment variables
          command: |
            echo APP_NAME=$APP_NAME
            echo APP_ID=$APP_ID
            echo APP_VERSION=$APP_VERSION
            echo ENVIRONMENT=$ENVIRONMENT
            echo PATH=$PATH
            echo BUILD=$BUILD

      - run:
          name: Install Gradle 3.3
          command: |
            wget -O /tmp/gradle.zip https://downloads.gradle.org/distributions/gradle-3.3-bin.zip
            unzip -d $ANDROID_HOME/tools /tmp/gradle.zip
            mv $ANDROID_HOME/tools/gradle-3.3 $ANDROID_HOME/tools/gradle

      - run:
          name: Apply App settings
          command: cordova-update-config --appname ${APP_NAME} --appid ${APP_ID} --appversion ${APP_VERSION}
          working_directory: cordova

  android_deploy:
    <<: *defaults
    docker:
      - image: circleci/ruby:2.5.1-node
    steps:
      - restore-cache: *restore-repo-cache
      - run: bundle exec fastlane android staging

workflows:
    version: 2
    build_and_bundle:
      jobs:
        - set_env_vars
        - checkout_code
        - package_dependencies:
            requires:
              - checkout_code
        - test_cases:
            requires:
              - package_dependencies
        - upload-coverage:
            requires:
              - package_dependencies
              - test_cases
        - www_build:
            requires:
              - upload-coverage
        - www-deploy:
            requires:
              - www_build
        - ember_cordova_build:
            requires:
              - package_dependencies
              # - www-deploy
        - android_build:
            requires:
              - ember_cordova_build

